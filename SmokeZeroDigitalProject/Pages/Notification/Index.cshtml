@page
@model SmokeZeroDigitalProject.Pages.Notification.IndexModel
@{
	ViewData["Title"] = "Notifications";
}
<h2 class="text-center my-4">Danh sách thông báo</h2>
<form id="filterForm" class="row mb-4 w-75 mx-auto">
    <div class="col-md-4">
        <input type="text" id="searchUser" class="form-control" placeholder="Tìm theo người nhận..." />
    </div>
    <div class="col-md-4">
        <input type="text" id="searchType" class="form-control" placeholder="Tìm theo loại thông báo..." />
    </div>
    <div class="col-md-4">
        <select id="sortOption" class="form-control">
            <option value="">-- Sắp xếp theo --</option>
            <option value="timeAsc">Thời gian ↑</option>
            <option value="timeDesc">Thời gian ↓</option>
            <option value="repeatAsc">Lặp lại ↑</option>
            <option value="repeatDesc">Lặp lại ↓</option>
        </select>
    </div>
</form>
@if (!Model.Notifications.Any())
{
    <div class="alert alert-info text-center">
        Không có thông báo nào.
    </div>
}
else
{
   <div class="card shadow-sm border-0 w-75 mx-auto">
        <div class="card-body p-4">
            <div class="table-responsive">
                <table class="table table-bordered table-hover align-middle text-center">
            <thead class="table-dark text-center">
                <tr>
                    <th>Người nhận</th>
                    <th>Loại</th>
                    <th>Tiêu đề</th>
                    <th>Nội dung</th>
                    <th>Thời gian</th>
                    <th>Lặp lại (ngày)</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Notifications)
                {
                    <tr>
                        <td>@item.User.FullName</td>
                        <td>@item.Type</td>
                        <td>@item.Title</td>
                        <td>@item.Message</td>
                        <td>@item.ScheduledTime.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>@item.RecurrencePattern</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" onclick="editNotification('@item.Id')">Sửa</button>
                                    <button class="btn btn-sm btn-danger" onclick="deleteNotification('@item.Id')">Xóa</button>

                                </td>

                    </tr>
                }
            </tbody>
                </table>
            </div>
        </div>
    </div>
}

<div class="modal fade" id="editNotificationModal" tabindex="-1" aria-labelledby="editNotificationLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="editNotificationLabel">Cập nhật Thông báo</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editId" />

                <div class="mb-3">
                    <label for="editType" class="form-label fw-semibold">Loại:</label>
                    <input type="text" id="editType" class="form-control" placeholder="Nhập loại thông báo..." />
                </div>

                <div class="mb-3">
                    <label for="editTitle" class="form-label fw-semibold">Tiêu đề:</label>
                    <input type="text" id="editTitle" class="form-control" placeholder="Nhập tiêu đề..." />
                </div>

                <div class="mb-3">
                    <label for="editMessage" class="form-label fw-semibold">Nội dung:</label>
                    <input type="text" id="editMessage" class="form-control" placeholder="Nhập nội dung..." />
                </div>

                <div class="mb-3">
                    <label for="editTime" class="form-label fw-semibold">Thời gian:</label>
                    <input type="datetime-local" id="editTime" class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="editRepeat" class="form-label fw-semibold">Lặp lại (ngày):</label>
                    <input type="number" id="editRepeat" class="form-control" placeholder="VD: 7 (mỗi 7 ngày)" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-success" onclick="submitUpdate()">Lưu</button>
            </div>
        </div>
    </div>
</div>


    @section Scripts{
    <script>
                function editNotification(id) {
            const row = document.querySelector(`button[onclick="editNotification('${id}')"]`).closest('tr');
            const cells = row.querySelectorAll('td');

            document.getElementById('editId').value = id;
            document.getElementById('editType').value = cells[1].innerText;
            document.getElementById('editTitle').value = cells[2].innerText;
            document.getElementById('editMessage').value = cells[3].innerText;
            document.getElementById('editTime').value = formatForInput(cells[4].innerText);
            document.getElementById('editRepeat').value = cells[5].innerText;

            const modal = new bootstrap.Modal(document.getElementById('editNotificationModal'));
            modal.show();
        }

        function formatForInput(dateStr) {
            const [day, month, yearTime] = dateStr.split('/');
            const [year, time] = yearTime.split(' ');
            return `${year}-${month}-${day}T${time}`;
        }

        async function submitUpdate() {
            const id = document.getElementById('editId').value;
            const data = {
                id: id,
				type: document.getElementById('editType').value,
                title: document.getElementById('editTitle').value,
                message: document.getElementById('editMessage').value,
                scheduledTime: document.getElementById('editTime').value,
                recurrencePattern: parseInt(document.getElementById('editRepeat').value)
                
            };

            const response = await fetch(`/api/noti`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                alert('Cập nhật thành công!');
                location.reload(); // hoặc cập nhật bảng không cần reload
            } else {
                const error = await response.text();
                alert('Lỗi: ' + error);
            }
        }
        async function deleteNotification(id) {
            if (!confirm("Bạn có chắc chắn muốn xóa thông báo này?")) {
                return;
            }

            try {
                const response = await fetch(`/api/noti/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    alert('Xóa thành công!');
                    location.reload(); // hoặc xóa dòng trong bảng mà không reload
                } else {
                    const errorText = await response.text();
                    alert("Lỗi khi xóa: " + errorText);
                }
            } catch (error) {
                console.error('Lỗi khi gọi API:', error);
                alert('Đã xảy ra lỗi khi kết nối đến server.');
            }
        }

             document.addEventListener('DOMContentLoaded', () => {
            const searchUser = document.getElementById('searchUser');
            const searchType = document.getElementById('searchType');
            const sortOption = document.getElementById('sortOption');

            [searchUser, searchType, sortOption].forEach(el =>
                el.addEventListener('input', filterAndSortTable)
            );

            function filterAndSortTable() {
                const userFilter = searchUser.value.toLowerCase();
                const typeFilter = searchType.value.toLowerCase();
                const sort = sortOption.value;

                const tbody = document.querySelector('tbody');
                const rows = Array.from(tbody.querySelectorAll('tr'));

                rows.forEach(row => {
                    const user = row.children[0].innerText.toLowerCase();
                    const type = row.children[1].innerText.toLowerCase();
                    row.style.display = (user.includes(userFilter) && type.includes(typeFilter)) ? '' : 'none';
                });

                let sortedRows = rows.filter(r => r.style.display !== 'none');

                if (sort === 'timeAsc' || sort === 'timeDesc') {
                    sortedRows.sort((a, b) => {
                        const dateA = parseDate(a.children[4].innerText);
                        const dateB = parseDate(b.children[4].innerText);
                        return sort === 'timeAsc' ? dateA - dateB : dateB - dateA;
                    });
                } else if (sort === 'repeatAsc' || sort === 'repeatDesc') {
                    sortedRows.sort((a, b) => {
                        const valA = parseInt(a.children[5].innerText || '0');
                        const valB = parseInt(b.children[5].innerText || '0');
                        return sort === 'repeatAsc' ? valA - valB : valB - valA;
                    });
                }

                // Re-append the sorted rows
                sortedRows.forEach(row => tbody.appendChild(row));
            }

            function parseDate(dateStr) {
                const [day, month, yearTime] = dateStr.split('/');
                const [year, time] = yearTime.split(' ');
                return new Date(`${year}-${month}-${day}T${time}`);
            }
        });

    </script>

    }